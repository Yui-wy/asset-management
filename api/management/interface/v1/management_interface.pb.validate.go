// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/management/interface/v1/management_interface.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LogoutReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LogoutReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// LogoutReplyValidationError is the validation error returned by
// LogoutReply.Validate if the designated constraints aren't met.
type LogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReplyValidationError) ErrorName() string { return "LogoutReplyValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReplyValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Power

	return nil
}

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on GetSelfReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetSelfReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSelfReqValidationError is the validation error returned by
// GetSelfReq.Validate if the designated constraints aren't met.
type GetSelfReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfReqValidationError) ErrorName() string { return "GetSelfReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSelfReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfReqValidationError{}

// Validate checks the field values on GetSelfReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetSelfReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Power

	return nil
}

// GetSelfReplyValidationError is the validation error returned by
// GetSelfReply.Validate if the designated constraints aren't met.
type GetSelfReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfReplyValidationError) ErrorName() string { return "GetSelfReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSelfReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfReplyValidationError{}

// Validate checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListUserReqValidationError is the validation error returned by
// ListUserReq.Validate if the designated constraints aren't met.
type ListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReqValidationError) ErrorName() string { return "ListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReqValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on GetKeyReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetKeyReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetKeyReqValidationError is the validation error returned by
// GetKeyReq.Validate if the designated constraints aren't met.
type GetKeyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyReqValidationError) ErrorName() string { return "GetKeyReqValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyReqValidationError{}

// Validate checks the field values on GetKeyReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetKeyReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	return nil
}

// GetKeyReplyValidationError is the validation error returned by
// GetKeyReply.Validate if the designated constraints aren't met.
type GetKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyReplyValidationError) ErrorName() string { return "GetKeyReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyReplyValidationError{}

// Validate checks the field values on ModifyUserPdReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ModifyUserPdReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Password

	return nil
}

// ModifyUserPdReqValidationError is the validation error returned by
// ModifyUserPdReq.Validate if the designated constraints aren't met.
type ModifyUserPdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyUserPdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyUserPdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyUserPdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyUserPdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyUserPdReqValidationError) ErrorName() string { return "ModifyUserPdReqValidationError" }

// Error satisfies the builtin error interface
func (e ModifyUserPdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyUserPdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyUserPdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyUserPdReqValidationError{}

// Validate checks the field values on ModifyUserPdReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ModifyUserPdReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// ModifyUserPdReplyValidationError is the validation error returned by
// ModifyUserPdReply.Validate if the designated constraints aren't met.
type ModifyUserPdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyUserPdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyUserPdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyUserPdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyUserPdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyUserPdReplyValidationError) ErrorName() string {
	return "ModifyUserPdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyUserPdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyUserPdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyUserPdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyUserPdReplyValidationError{}

// Validate checks the field values on DeleteUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteUserReqValidationError is the validation error returned by
// DeleteUserReq.Validate if the designated constraints aren't met.
type DeleteUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReqValidationError) ErrorName() string { return "DeleteUserReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReqValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on ListAssetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAssetReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssetReqValidationError{
				field:  "Conf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListAssetReqValidationError is the validation error returned by
// ListAssetReq.Validate if the designated constraints aren't met.
type ListAssetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetReqValidationError) ErrorName() string { return "ListAssetReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAssetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetReqValidationError{}

// Validate checks the field values on ListAssetReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAssetReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssetReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAssetReplyValidationError is the validation error returned by
// ListAssetReply.Validate if the designated constraints aren't met.
type ListAssetReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetReplyValidationError) ErrorName() string { return "ListAssetReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAssetReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetReplyValidationError{}

// Validate checks the field values on GetAssetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAssetReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetAssetReqValidationError is the validation error returned by
// GetAssetReq.Validate if the designated constraints aren't met.
type GetAssetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetReqValidationError) ErrorName() string { return "GetAssetReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAssetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetReqValidationError{}

// Validate checks the field values on GetAssetReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAssetReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Classes

	// no validation rules for Code

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// GetAssetReplyValidationError is the validation error returned by
// GetAssetReply.Validate if the designated constraints aren't met.
type GetAssetReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetReplyValidationError) ErrorName() string { return "GetAssetReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAssetReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetReplyValidationError{}

// Validate checks the field values on UpdateAssetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateAssetReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	return nil
}

// UpdateAssetReqValidationError is the validation error returned by
// UpdateAssetReq.Validate if the designated constraints aren't met.
type UpdateAssetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetReqValidationError) ErrorName() string { return "UpdateAssetReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAssetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetReqValidationError{}

// Validate checks the field values on UpdateAssetReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAssetReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Classes

	// no validation rules for Code

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// UpdateAssetReplyValidationError is the validation error returned by
// UpdateAssetReply.Validate if the designated constraints aren't met.
type UpdateAssetReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetReplyValidationError) ErrorName() string { return "UpdateAssetReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAssetReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetReplyValidationError{}

// Validate checks the field values on ListAreaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAreaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListAreaReqValidationError is the validation error returned by
// ListAreaReq.Validate if the designated constraints aren't met.
type ListAreaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAreaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAreaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAreaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAreaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAreaReqValidationError) ErrorName() string { return "ListAreaReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAreaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAreaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAreaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAreaReqValidationError{}

// Validate checks the field values on ListAreaReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAreaReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAreas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAreaReplyValidationError{
					field:  fmt.Sprintf("Areas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAreaReplyValidationError is the validation error returned by
// ListAreaReply.Validate if the designated constraints aren't met.
type ListAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAreaReplyValidationError) ErrorName() string { return "ListAreaReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAreaReplyValidationError{}

// Validate checks the field values on GetAreaReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetAreaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetAreaReqValidationError is the validation error returned by
// GetAreaReq.Validate if the designated constraints aren't met.
type GetAreaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAreaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAreaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAreaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAreaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAreaReqValidationError) ErrorName() string { return "GetAreaReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAreaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAreaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAreaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAreaReqValidationError{}

// Validate checks the field values on GetAreaReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAreaReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// GetAreaReplyValidationError is the validation error returned by
// GetAreaReply.Validate if the designated constraints aren't met.
type GetAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAreaReplyValidationError) ErrorName() string { return "GetAreaReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAreaReplyValidationError{}

// Validate checks the field values on ListStorageFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageFormReqValidationError{
				field:  "Conf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListStorageFormReqValidationError is the validation error returned by
// ListStorageFormReq.Validate if the designated constraints aren't met.
type ListStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReqValidationError) ErrorName() string {
	return "ListStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReqValidationError{}

// Validate checks the field values on ListStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetForms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageFormReplyValidationError{
					field:  fmt.Sprintf("Forms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListStorageFormReplyValidationError is the validation error returned by
// ListStorageFormReply.Validate if the designated constraints aren't met.
type ListStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReplyValidationError) ErrorName() string {
	return "ListStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReplyValidationError{}

// Validate checks the field values on GetStorageFormReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetStorageFormReqValidationError is the validation error returned by
// GetStorageFormReq.Validate if the designated constraints aren't met.
type GetStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStorageFormReqValidationError) ErrorName() string {
	return "GetStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStorageFormReqValidationError{}

// Validate checks the field values on GetStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// GetStorageFormReplyValidationError is the validation error returned by
// GetStorageFormReply.Validate if the designated constraints aren't met.
type GetStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStorageFormReplyValidationError) ErrorName() string {
	return "GetStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStorageFormReplyValidationError{}

// Validate checks the field values on CreateStorageFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Classes

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	return nil
}

// CreateStorageFormReqValidationError is the validation error returned by
// CreateStorageFormReq.Validate if the designated constraints aren't met.
type CreateStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageFormReqValidationError) ErrorName() string {
	return "CreateStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageFormReqValidationError{}

// Validate checks the field values on CreateStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// CreateStorageFormReplyValidationError is the validation error returned by
// CreateStorageFormReply.Validate if the designated constraints aren't met.
type CreateStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageFormReplyValidationError) ErrorName() string {
	return "CreateStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageFormReplyValidationError{}

// Validate checks the field values on CreateStorageFormsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStorageFormsReq) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAssets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateStorageFormsReqValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateStorageFormsReqValidationError is the validation error returned by
// CreateStorageFormsReq.Validate if the designated constraints aren't met.
type CreateStorageFormsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageFormsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageFormsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageFormsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageFormsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageFormsReqValidationError) ErrorName() string {
	return "CreateStorageFormsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageFormsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageFormsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageFormsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageFormsReqValidationError{}

// Validate checks the field values on CreateStorageFormsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStorageFormsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// CreateStorageFormsReplyValidationError is the validation error returned by
// CreateStorageFormsReply.Validate if the designated constraints aren't met.
type CreateStorageFormsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageFormsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageFormsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageFormsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageFormsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageFormsReplyValidationError) ErrorName() string {
	return "CreateStorageFormsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageFormsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageFormsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageFormsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageFormsReplyValidationError{}

// Validate checks the field values on UpdateStorageFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for StateNum

	// no validation rules for AreaId

	return nil
}

// UpdateStorageFormReqValidationError is the validation error returned by
// UpdateStorageFormReq.Validate if the designated constraints aren't met.
type UpdateStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorageFormReqValidationError) ErrorName() string {
	return "UpdateStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorageFormReqValidationError{}

// Validate checks the field values on UpdateStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// UpdateStorageFormReplyValidationError is the validation error returned by
// UpdateStorageFormReply.Validate if the designated constraints aren't met.
type UpdateStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorageFormReplyValidationError) ErrorName() string {
	return "UpdateStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorageFormReplyValidationError{}

// Validate checks the field values on ListScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListScrappedFormReqValidationError{
				field:  "Conf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListScrappedFormReqValidationError is the validation error returned by
// ListScrappedFormReq.Validate if the designated constraints aren't met.
type ListScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReqValidationError) ErrorName() string {
	return "ListScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReqValidationError{}

// Validate checks the field values on ListScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetForms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListScrappedFormReplyValidationError{
					field:  fmt.Sprintf("Forms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListScrappedFormReplyValidationError is the validation error returned by
// ListScrappedFormReply.Validate if the designated constraints aren't met.
type ListScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReplyValidationError) ErrorName() string {
	return "ListScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReplyValidationError{}

// Validate checks the field values on GetScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetScrappedFormReqValidationError is the validation error returned by
// GetScrappedFormReq.Validate if the designated constraints aren't met.
type GetScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScrappedFormReqValidationError) ErrorName() string {
	return "GetScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScrappedFormReqValidationError{}

// Validate checks the field values on GetScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// GetScrappedFormReplyValidationError is the validation error returned by
// GetScrappedFormReply.Validate if the designated constraints aren't met.
type GetScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScrappedFormReplyValidationError) ErrorName() string {
	return "GetScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScrappedFormReplyValidationError{}

// Validate checks the field values on CreateScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// CreateScrappedFormReqValidationError is the validation error returned by
// CreateScrappedFormReq.Validate if the designated constraints aren't met.
type CreateScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScrappedFormReqValidationError) ErrorName() string {
	return "CreateScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScrappedFormReqValidationError{}

// Validate checks the field values on CreateScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// CreateScrappedFormReplyValidationError is the validation error returned by
// CreateScrappedFormReply.Validate if the designated constraints aren't met.
type CreateScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScrappedFormReplyValidationError) ErrorName() string {
	return "CreateScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScrappedFormReplyValidationError{}

// Validate checks the field values on UpdateScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for StateNum

	// no validation rules for AreaId

	return nil
}

// UpdateScrappedFormReqValidationError is the validation error returned by
// UpdateScrappedFormReq.Validate if the designated constraints aren't met.
type UpdateScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScrappedFormReqValidationError) ErrorName() string {
	return "UpdateScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScrappedFormReqValidationError{}

// Validate checks the field values on UpdateScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// UpdateScrappedFormReplyValidationError is the validation error returned by
// UpdateScrappedFormReply.Validate if the designated constraints aren't met.
type UpdateScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScrappedFormReplyValidationError) ErrorName() string {
	return "UpdateScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScrappedFormReplyValidationError{}

// Validate checks the field values on ListUserReply_Users with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserReply_Users) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Power

	return nil
}

// ListUserReply_UsersValidationError is the validation error returned by
// ListUserReply_Users.Validate if the designated constraints aren't met.
type ListUserReply_UsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UsersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UsersValidationError) ErrorName() string {
	return "ListUserReply_UsersValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_Users.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UsersValidationError{}

// Validate checks the field values on ListAssetReq_Condition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAssetReq_Condition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Classes

	// no validation rules for Address

	// no validation rules for StateNum

	// no validation rules for LowStorageAt

	// no validation rules for UpStorageAt

	// no validation rules for OrderBy

	// no validation rules for SortDesc

	return nil
}

// ListAssetReq_ConditionValidationError is the validation error returned by
// ListAssetReq_Condition.Validate if the designated constraints aren't met.
type ListAssetReq_ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetReq_ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetReq_ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetReq_ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetReq_ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetReq_ConditionValidationError) ErrorName() string {
	return "ListAssetReq_ConditionValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetReq_ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetReq_Condition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetReq_ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetReq_ConditionValidationError{}

// Validate checks the field values on ListAssetReply_Assets with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAssetReply_Assets) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Classes

	// no validation rules for Code

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// ListAssetReply_AssetsValidationError is the validation error returned by
// ListAssetReply_Assets.Validate if the designated constraints aren't met.
type ListAssetReply_AssetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetReply_AssetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetReply_AssetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetReply_AssetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetReply_AssetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetReply_AssetsValidationError) ErrorName() string {
	return "ListAssetReply_AssetsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetReply_AssetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetReply_Assets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetReply_AssetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetReply_AssetsValidationError{}

// Validate checks the field values on ListAreaReply_Areas with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAreaReply_Areas) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// ListAreaReply_AreasValidationError is the validation error returned by
// ListAreaReply_Areas.Validate if the designated constraints aren't met.
type ListAreaReply_AreasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAreaReply_AreasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAreaReply_AreasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAreaReply_AreasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAreaReply_AreasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAreaReply_AreasValidationError) ErrorName() string {
	return "ListAreaReply_AreasValidationError"
}

// Error satisfies the builtin error interface
func (e ListAreaReply_AreasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAreaReply_Areas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAreaReply_AreasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAreaReply_AreasValidationError{}

// Validate checks the field values on ListStorageFormReq_Conf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReq_Conf) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicantId

	// no validation rules for OperatorId

	// no validation rules for StateNum

	// no validation rules for AssetId

	// no validation rules for AssetCode

	return nil
}

// ListStorageFormReq_ConfValidationError is the validation error returned by
// ListStorageFormReq_Conf.Validate if the designated constraints aren't met.
type ListStorageFormReq_ConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReq_ConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReq_ConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReq_ConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReq_ConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReq_ConfValidationError) ErrorName() string {
	return "ListStorageFormReq_ConfValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReq_ConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReq_Conf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReq_ConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReq_ConfValidationError{}

// Validate checks the field values on ListStorageFormReply_Form with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReply_Form) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// ListStorageFormReply_FormValidationError is the validation error returned by
// ListStorageFormReply_Form.Validate if the designated constraints aren't met.
type ListStorageFormReply_FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReply_FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReply_FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReply_FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReply_FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReply_FormValidationError) ErrorName() string {
	return "ListStorageFormReply_FormValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReply_FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReply_Form.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReply_FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReply_FormValidationError{}

// Validate checks the field values on CreateStorageFormsReq_Asset with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStorageFormsReq_Asset) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Classes

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	return nil
}

// CreateStorageFormsReq_AssetValidationError is the validation error returned
// by CreateStorageFormsReq_Asset.Validate if the designated constraints
// aren't met.
type CreateStorageFormsReq_AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageFormsReq_AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageFormsReq_AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageFormsReq_AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageFormsReq_AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageFormsReq_AssetValidationError) ErrorName() string {
	return "CreateStorageFormsReq_AssetValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageFormsReq_AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageFormsReq_Asset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageFormsReq_AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageFormsReq_AssetValidationError{}

// Validate checks the field values on ListScrappedFormReq_Conf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReq_Conf) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicantId

	// no validation rules for OperatorId

	// no validation rules for StateNum

	// no validation rules for AssetId

	// no validation rules for AssetCode

	return nil
}

// ListScrappedFormReq_ConfValidationError is the validation error returned by
// ListScrappedFormReq_Conf.Validate if the designated constraints aren't met.
type ListScrappedFormReq_ConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReq_ConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReq_ConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReq_ConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReq_ConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReq_ConfValidationError) ErrorName() string {
	return "ListScrappedFormReq_ConfValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReq_ConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReq_Conf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReq_ConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReq_ConfValidationError{}

// Validate checks the field values on ListScrappedFormReply_Form with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReply_Form) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// ListScrappedFormReply_FormValidationError is the validation error returned
// by ListScrappedFormReply_Form.Validate if the designated constraints aren't met.
type ListScrappedFormReply_FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReply_FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReply_FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReply_FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReply_FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReply_FormValidationError) ErrorName() string {
	return "ListScrappedFormReply_FormValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReply_FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReply_Form.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReply_FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReply_FormValidationError{}
