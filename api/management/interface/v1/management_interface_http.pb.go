// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ManagementInterfaceHTTPServer interface {
	CreateScrappedForm(context.Context, *CreateScrappedFormReq) (*CreateScrappedFormReply, error)
	CreateStorageForm(context.Context, *CreateStorageFormReq) (*CreateStorageFormReply, error)
	CreateStorageForms(context.Context, *CreateStorageFormsReq) (*CreateStorageFormsReply, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	GetArea(context.Context, *GetAreaReq) (*GetAreaReply, error)
	GetAsset(context.Context, *GetAssetReq) (*GetAssetReply, error)
	GetKey(context.Context, *GetKeyReq) (*GetKeyReply, error)
	GetScrappedForm(context.Context, *GetScrappedFormReq) (*GetScrappedFormReply, error)
	GetStorageForm(context.Context, *GetStorageFormReq) (*GetStorageFormReply, error)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	ListArea(context.Context, *ListAreaReq) (*ListAreaReply, error)
	ListAsset(context.Context, *ListAssetReq) (*ListAssetReply, error)
	ListScrappedForm(context.Context, *ListScrappedFormReq) (*ListScrappedFormReply, error)
	ListStorageForm(context.Context, *ListStorageFormReq) (*ListStorageFormReply, error)
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	ModifyUserPd(context.Context, *ModifyUserPdReq) (*ModifyUserPdReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	UpdateAsset(context.Context, *UpdateAssetReq) (*UpdateAssetReply, error)
	UpdateScrappedForm(context.Context, *UpdateScrappedFormReq) (*UpdateScrappedFormReply, error)
	UpdateStorageForm(context.Context, *UpdateStorageFormReq) (*UpdateStorageFormReply, error)
}

func RegisterManagementInterfaceHTTPServer(s *http.Server, srv ManagementInterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/user/login", _ManagementInterface_Login0_HTTP_Handler(srv))
	r.GET("/user/key", _ManagementInterface_GetKey0_HTTP_Handler(srv))
	r.POST("/user/logout", _ManagementInterface_Logout0_HTTP_Handler(srv))
	r.POST("/user/register", _ManagementInterface_Register0_HTTP_Handler(srv))
	r.GET("/user/{id}", _ManagementInterface_GetUser0_HTTP_Handler(srv))
	r.POST("/user/list", _ManagementInterface_ListUser0_HTTP_Handler(srv))
	r.POST("/user/pd", _ManagementInterface_ModifyUserPd0_HTTP_Handler(srv))
	r.DELETE("/user", _ManagementInterface_DeleteUser0_HTTP_Handler(srv))
	r.POST("/area/list", _ManagementInterface_ListArea0_HTTP_Handler(srv))
	r.GET("/area/detail/{id}", _ManagementInterface_GetArea0_HTTP_Handler(srv))
	r.POST("/asset/list", _ManagementInterface_ListAsset0_HTTP_Handler(srv))
	r.GET("/asset/detail/{id}", _ManagementInterface_GetAsset0_HTTP_Handler(srv))
	r.POST("/asset/update", _ManagementInterface_UpdateAsset0_HTTP_Handler(srv))
	r.POST("/form/storage/list", _ManagementInterface_ListStorageForm0_HTTP_Handler(srv))
	r.GET("/form/storage/{id}", _ManagementInterface_GetStorageForm0_HTTP_Handler(srv))
	r.POST("/form/storage/create", _ManagementInterface_CreateStorageForm0_HTTP_Handler(srv))
	r.POST("/form/storage/creates", _ManagementInterface_CreateStorageForms0_HTTP_Handler(srv))
	r.POST("/form/storage/update", _ManagementInterface_UpdateStorageForm0_HTTP_Handler(srv))
	r.POST("/form/scrapped/list", _ManagementInterface_ListScrappedForm0_HTTP_Handler(srv))
	r.GET("/form/scrapped/{id}", _ManagementInterface_GetScrappedForm0_HTTP_Handler(srv))
	r.POST("/form/scrapped/create", _ManagementInterface_CreateScrappedForm0_HTTP_Handler(srv))
	r.POST("/form/scrapped/update", _ManagementInterface_UpdateScrappedForm0_HTTP_Handler(srv))
}

func _ManagementInterface_Login0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_GetKey0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetKeyReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/GetKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKey(ctx, req.(*GetKeyReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetKeyReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_Logout0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_Register0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_GetUser0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/GetUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_ListUser0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/ListUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_ModifyUserPd0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyUserPdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/ModifyUserPd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyUserPd(ctx, req.(*ModifyUserPdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyUserPdReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_DeleteUser0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/DeleteUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_ListArea0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAreaReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/ListArea")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListArea(ctx, req.(*ListAreaReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAreaReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_GetArea0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAreaReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/GetArea")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArea(ctx, req.(*GetAreaReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAreaReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_ListAsset0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAssetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/ListAsset")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAsset(ctx, req.(*ListAssetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAssetReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_GetAsset0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAssetReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/GetAsset")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAsset(ctx, req.(*GetAssetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAssetReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_UpdateAsset0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAssetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/UpdateAsset")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAsset(ctx, req.(*UpdateAssetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAssetReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_ListStorageForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStorageFormReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/ListStorageForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStorageForm(ctx, req.(*ListStorageFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStorageFormReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_GetStorageForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStorageFormReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/GetStorageForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStorageForm(ctx, req.(*GetStorageFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStorageFormReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_CreateStorageForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStorageFormReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/CreateStorageForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStorageForm(ctx, req.(*CreateStorageFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStorageFormReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_CreateStorageForms0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStorageFormsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/CreateStorageForms")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStorageForms(ctx, req.(*CreateStorageFormsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStorageFormsReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_UpdateStorageForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStorageFormReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/UpdateStorageForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStorageForm(ctx, req.(*UpdateStorageFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStorageFormReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_ListScrappedForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListScrappedFormReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/ListScrappedForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListScrappedForm(ctx, req.(*ListScrappedFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListScrappedFormReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_GetScrappedForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetScrappedFormReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/GetScrappedForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetScrappedForm(ctx, req.(*GetScrappedFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetScrappedFormReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_CreateScrappedForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateScrappedFormReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/CreateScrappedForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateScrappedForm(ctx, req.(*CreateScrappedFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateScrappedFormReply)
		return ctx.Result(200, reply)
	}
}

func _ManagementInterface_UpdateScrappedForm0_HTTP_Handler(srv ManagementInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateScrappedFormReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/management.interface.v1.ManagementInterface/UpdateScrappedForm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateScrappedForm(ctx, req.(*UpdateScrappedFormReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateScrappedFormReply)
		return ctx.Result(200, reply)
	}
}

type ManagementInterfaceHTTPClient interface {
	CreateScrappedForm(ctx context.Context, req *CreateScrappedFormReq, opts ...http.CallOption) (rsp *CreateScrappedFormReply, err error)
	CreateStorageForm(ctx context.Context, req *CreateStorageFormReq, opts ...http.CallOption) (rsp *CreateStorageFormReply, err error)
	CreateStorageForms(ctx context.Context, req *CreateStorageFormsReq, opts ...http.CallOption) (rsp *CreateStorageFormsReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserReq, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	GetArea(ctx context.Context, req *GetAreaReq, opts ...http.CallOption) (rsp *GetAreaReply, err error)
	GetAsset(ctx context.Context, req *GetAssetReq, opts ...http.CallOption) (rsp *GetAssetReply, err error)
	GetKey(ctx context.Context, req *GetKeyReq, opts ...http.CallOption) (rsp *GetKeyReply, err error)
	GetScrappedForm(ctx context.Context, req *GetScrappedFormReq, opts ...http.CallOption) (rsp *GetScrappedFormReply, err error)
	GetStorageForm(ctx context.Context, req *GetStorageFormReq, opts ...http.CallOption) (rsp *GetStorageFormReply, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *GetUserReply, err error)
	ListArea(ctx context.Context, req *ListAreaReq, opts ...http.CallOption) (rsp *ListAreaReply, err error)
	ListAsset(ctx context.Context, req *ListAssetReq, opts ...http.CallOption) (rsp *ListAssetReply, err error)
	ListScrappedForm(ctx context.Context, req *ListScrappedFormReq, opts ...http.CallOption) (rsp *ListScrappedFormReply, err error)
	ListStorageForm(ctx context.Context, req *ListStorageFormReq, opts ...http.CallOption) (rsp *ListStorageFormReply, err error)
	ListUser(ctx context.Context, req *ListUserReq, opts ...http.CallOption) (rsp *ListUserReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
	ModifyUserPd(ctx context.Context, req *ModifyUserPdReq, opts ...http.CallOption) (rsp *ModifyUserPdReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
	UpdateAsset(ctx context.Context, req *UpdateAssetReq, opts ...http.CallOption) (rsp *UpdateAssetReply, err error)
	UpdateScrappedForm(ctx context.Context, req *UpdateScrappedFormReq, opts ...http.CallOption) (rsp *UpdateScrappedFormReply, err error)
	UpdateStorageForm(ctx context.Context, req *UpdateStorageFormReq, opts ...http.CallOption) (rsp *UpdateStorageFormReply, err error)
}

type ManagementInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewManagementInterfaceHTTPClient(client *http.Client) ManagementInterfaceHTTPClient {
	return &ManagementInterfaceHTTPClientImpl{client}
}

func (c *ManagementInterfaceHTTPClientImpl) CreateScrappedForm(ctx context.Context, in *CreateScrappedFormReq, opts ...http.CallOption) (*CreateScrappedFormReply, error) {
	var out CreateScrappedFormReply
	pattern := "/form/scrapped/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/CreateScrappedForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) CreateStorageForm(ctx context.Context, in *CreateStorageFormReq, opts ...http.CallOption) (*CreateStorageFormReply, error) {
	var out CreateStorageFormReply
	pattern := "/form/storage/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/CreateStorageForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) CreateStorageForms(ctx context.Context, in *CreateStorageFormsReq, opts ...http.CallOption) (*CreateStorageFormsReply, error) {
	var out CreateStorageFormsReply
	pattern := "/form/storage/creates"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/CreateStorageForms"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/DeleteUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) GetArea(ctx context.Context, in *GetAreaReq, opts ...http.CallOption) (*GetAreaReply, error) {
	var out GetAreaReply
	pattern := "/area/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/GetArea"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) GetAsset(ctx context.Context, in *GetAssetReq, opts ...http.CallOption) (*GetAssetReply, error) {
	var out GetAssetReply
	pattern := "/asset/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/GetAsset"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) GetKey(ctx context.Context, in *GetKeyReq, opts ...http.CallOption) (*GetKeyReply, error) {
	var out GetKeyReply
	pattern := "/user/key"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/GetKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) GetScrappedForm(ctx context.Context, in *GetScrappedFormReq, opts ...http.CallOption) (*GetScrappedFormReply, error) {
	var out GetScrappedFormReply
	pattern := "/form/scrapped/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/GetScrappedForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) GetStorageForm(ctx context.Context, in *GetStorageFormReq, opts ...http.CallOption) (*GetStorageFormReply, error) {
	var out GetStorageFormReply
	pattern := "/form/storage/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/GetStorageForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/GetUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) ListArea(ctx context.Context, in *ListAreaReq, opts ...http.CallOption) (*ListAreaReply, error) {
	var out ListAreaReply
	pattern := "/area/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/ListArea"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) ListAsset(ctx context.Context, in *ListAssetReq, opts ...http.CallOption) (*ListAssetReply, error) {
	var out ListAssetReply
	pattern := "/asset/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/ListAsset"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) ListScrappedForm(ctx context.Context, in *ListScrappedFormReq, opts ...http.CallOption) (*ListScrappedFormReply, error) {
	var out ListScrappedFormReply
	pattern := "/form/scrapped/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/ListScrappedForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) ListStorageForm(ctx context.Context, in *ListStorageFormReq, opts ...http.CallOption) (*ListStorageFormReply, error) {
	var out ListStorageFormReply
	pattern := "/form/storage/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/ListStorageForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) ListUser(ctx context.Context, in *ListUserReq, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/ListUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/user/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) ModifyUserPd(ctx context.Context, in *ModifyUserPdReq, opts ...http.CallOption) (*ModifyUserPdReply, error) {
	var out ModifyUserPdReply
	pattern := "/user/pd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/ModifyUserPd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) UpdateAsset(ctx context.Context, in *UpdateAssetReq, opts ...http.CallOption) (*UpdateAssetReply, error) {
	var out UpdateAssetReply
	pattern := "/asset/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/UpdateAsset"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) UpdateScrappedForm(ctx context.Context, in *UpdateScrappedFormReq, opts ...http.CallOption) (*UpdateScrappedFormReply, error) {
	var out UpdateScrappedFormReply
	pattern := "/form/scrapped/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/UpdateScrappedForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ManagementInterfaceHTTPClientImpl) UpdateStorageForm(ctx context.Context, in *UpdateStorageFormReq, opts ...http.CallOption) (*UpdateStorageFormReply, error) {
	var out UpdateStorageFormReply
	pattern := "/form/storage/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/management.interface.v1.ManagementInterface/UpdateStorageForm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
