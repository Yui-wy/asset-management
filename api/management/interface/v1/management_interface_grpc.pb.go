// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementInterfaceClient is the client API for ManagementInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementInterfaceClient interface {
	// 用户系统 =================================
	// 用户登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 得到RSA密钥
	GetKey(ctx context.Context, in *GetKeyReq, opts ...grpc.CallOption) (*GetKeyReply, error)
	// 用户登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	// 用户注册 admin
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// 得到用户 admin
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error)
	// 列出用户 admin
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error)
	// 修改密码 admin
	ModifyUserPd(ctx context.Context, in *ModifyUserPdReq, opts ...grpc.CallOption) (*ModifyUserPdReply, error)
	// 删除用户 admin
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error)
	// 区域系统 =================================
	// 列出所有区域详细信息
	ListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaReply, error)
	// 通过ID得到区域
	GetArea(ctx context.Context, in *GetAreaReq, opts ...grpc.CallOption) (*GetAreaReply, error)
	// 资产系统 =================================
	// 列出资产(按条件)
	ListAsset(ctx context.Context, in *ListAssetReq, opts ...grpc.CallOption) (*ListAssetReply, error)
	// 得到资产信息
	GetAsset(ctx context.Context, in *GetAssetReq, opts ...grpc.CallOption) (*GetAssetReply, error)
	// 更新资产信息
	UpdateAsset(ctx context.Context, in *UpdateAssetReq, opts ...grpc.CallOption) (*UpdateAssetReply, error)
	// 单表系统 =================================
	// 列出表单
	ListStorageForm(ctx context.Context, in *ListStorageFormReq, opts ...grpc.CallOption) (*ListStorageFormReply, error)
	// 查找表单
	GetStorageForm(ctx context.Context, in *GetStorageFormReq, opts ...grpc.CallOption) (*GetStorageFormReply, error)
	// 创建申请表
	CreateStorageForm(ctx context.Context, in *CreateStorageFormReq, opts ...grpc.CallOption) (*CreateStorageFormReply, error)
	// 创建多申请表
	CreateStorageForms(ctx context.Context, in *CreateStorageFormsReq, opts ...grpc.CallOption) (*CreateStorageFormsReply, error)
	// 更新申请表
	UpdateStorageForm(ctx context.Context, in *UpdateStorageFormReq, opts ...grpc.CallOption) (*UpdateStorageFormReply, error)
	// 列出表单
	ListScrappedForm(ctx context.Context, in *ListScrappedFormReq, opts ...grpc.CallOption) (*ListScrappedFormReply, error)
	// 查找表单
	GetScrappedForm(ctx context.Context, in *GetScrappedFormReq, opts ...grpc.CallOption) (*GetScrappedFormReply, error)
	// 创建申请表
	CreateScrappedForm(ctx context.Context, in *CreateScrappedFormReq, opts ...grpc.CallOption) (*CreateScrappedFormReply, error)
	// 更新申请表
	UpdateScrappedForm(ctx context.Context, in *UpdateScrappedFormReq, opts ...grpc.CallOption) (*UpdateScrappedFormReply, error)
}

type managementInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementInterfaceClient(cc grpc.ClientConnInterface) ManagementInterfaceClient {
	return &managementInterfaceClient{cc}
}

func (c *managementInterfaceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) GetKey(ctx context.Context, in *GetKeyReq, opts ...grpc.CallOption) (*GetKeyReply, error) {
	out := new(GetKeyReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) ModifyUserPd(ctx context.Context, in *ModifyUserPdReq, opts ...grpc.CallOption) (*ModifyUserPdReply, error) {
	out := new(ModifyUserPdReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/ModifyUserPd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) ListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaReply, error) {
	out := new(ListAreaReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/ListArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) GetArea(ctx context.Context, in *GetAreaReq, opts ...grpc.CallOption) (*GetAreaReply, error) {
	out := new(GetAreaReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/GetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) ListAsset(ctx context.Context, in *ListAssetReq, opts ...grpc.CallOption) (*ListAssetReply, error) {
	out := new(ListAssetReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/ListAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) GetAsset(ctx context.Context, in *GetAssetReq, opts ...grpc.CallOption) (*GetAssetReply, error) {
	out := new(GetAssetReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) UpdateAsset(ctx context.Context, in *UpdateAssetReq, opts ...grpc.CallOption) (*UpdateAssetReply, error) {
	out := new(UpdateAssetReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) ListStorageForm(ctx context.Context, in *ListStorageFormReq, opts ...grpc.CallOption) (*ListStorageFormReply, error) {
	out := new(ListStorageFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/ListStorageForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) GetStorageForm(ctx context.Context, in *GetStorageFormReq, opts ...grpc.CallOption) (*GetStorageFormReply, error) {
	out := new(GetStorageFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/GetStorageForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) CreateStorageForm(ctx context.Context, in *CreateStorageFormReq, opts ...grpc.CallOption) (*CreateStorageFormReply, error) {
	out := new(CreateStorageFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/CreateStorageForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) CreateStorageForms(ctx context.Context, in *CreateStorageFormsReq, opts ...grpc.CallOption) (*CreateStorageFormsReply, error) {
	out := new(CreateStorageFormsReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/CreateStorageForms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) UpdateStorageForm(ctx context.Context, in *UpdateStorageFormReq, opts ...grpc.CallOption) (*UpdateStorageFormReply, error) {
	out := new(UpdateStorageFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/UpdateStorageForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) ListScrappedForm(ctx context.Context, in *ListScrappedFormReq, opts ...grpc.CallOption) (*ListScrappedFormReply, error) {
	out := new(ListScrappedFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/ListScrappedForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) GetScrappedForm(ctx context.Context, in *GetScrappedFormReq, opts ...grpc.CallOption) (*GetScrappedFormReply, error) {
	out := new(GetScrappedFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/GetScrappedForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) CreateScrappedForm(ctx context.Context, in *CreateScrappedFormReq, opts ...grpc.CallOption) (*CreateScrappedFormReply, error) {
	out := new(CreateScrappedFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/CreateScrappedForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementInterfaceClient) UpdateScrappedForm(ctx context.Context, in *UpdateScrappedFormReq, opts ...grpc.CallOption) (*UpdateScrappedFormReply, error) {
	out := new(UpdateScrappedFormReply)
	err := c.cc.Invoke(ctx, "/management.interface.v1.ManagementInterface/UpdateScrappedForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementInterfaceServer is the server API for ManagementInterface service.
// All implementations must embed UnimplementedManagementInterfaceServer
// for forward compatibility
type ManagementInterfaceServer interface {
	// 用户系统 =================================
	// 用户登陆
	Login(context.Context, *LoginReq) (*LoginReply, error)
	// 得到RSA密钥
	GetKey(context.Context, *GetKeyReq) (*GetKeyReply, error)
	// 用户登出
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	// 用户注册 admin
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	// 得到用户 admin
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	// 列出用户 admin
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	// 修改密码 admin
	ModifyUserPd(context.Context, *ModifyUserPdReq) (*ModifyUserPdReply, error)
	// 删除用户 admin
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	// 区域系统 =================================
	// 列出所有区域详细信息
	ListArea(context.Context, *ListAreaReq) (*ListAreaReply, error)
	// 通过ID得到区域
	GetArea(context.Context, *GetAreaReq) (*GetAreaReply, error)
	// 资产系统 =================================
	// 列出资产(按条件)
	ListAsset(context.Context, *ListAssetReq) (*ListAssetReply, error)
	// 得到资产信息
	GetAsset(context.Context, *GetAssetReq) (*GetAssetReply, error)
	// 更新资产信息
	UpdateAsset(context.Context, *UpdateAssetReq) (*UpdateAssetReply, error)
	// 单表系统 =================================
	// 列出表单
	ListStorageForm(context.Context, *ListStorageFormReq) (*ListStorageFormReply, error)
	// 查找表单
	GetStorageForm(context.Context, *GetStorageFormReq) (*GetStorageFormReply, error)
	// 创建申请表
	CreateStorageForm(context.Context, *CreateStorageFormReq) (*CreateStorageFormReply, error)
	// 创建多申请表
	CreateStorageForms(context.Context, *CreateStorageFormsReq) (*CreateStorageFormsReply, error)
	// 更新申请表
	UpdateStorageForm(context.Context, *UpdateStorageFormReq) (*UpdateStorageFormReply, error)
	// 列出表单
	ListScrappedForm(context.Context, *ListScrappedFormReq) (*ListScrappedFormReply, error)
	// 查找表单
	GetScrappedForm(context.Context, *GetScrappedFormReq) (*GetScrappedFormReply, error)
	// 创建申请表
	CreateScrappedForm(context.Context, *CreateScrappedFormReq) (*CreateScrappedFormReply, error)
	// 更新申请表
	UpdateScrappedForm(context.Context, *UpdateScrappedFormReq) (*UpdateScrappedFormReply, error)
	mustEmbedUnimplementedManagementInterfaceServer()
}

// UnimplementedManagementInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementInterfaceServer struct {
}

func (UnimplementedManagementInterfaceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedManagementInterfaceServer) GetKey(context.Context, *GetKeyReq) (*GetKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedManagementInterfaceServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedManagementInterfaceServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedManagementInterfaceServer) GetUser(context.Context, *GetUserReq) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedManagementInterfaceServer) ListUser(context.Context, *ListUserReq) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedManagementInterfaceServer) ModifyUserPd(context.Context, *ModifyUserPdReq) (*ModifyUserPdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUserPd not implemented")
}
func (UnimplementedManagementInterfaceServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedManagementInterfaceServer) ListArea(context.Context, *ListAreaReq) (*ListAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArea not implemented")
}
func (UnimplementedManagementInterfaceServer) GetArea(context.Context, *GetAreaReq) (*GetAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArea not implemented")
}
func (UnimplementedManagementInterfaceServer) ListAsset(context.Context, *ListAssetReq) (*ListAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAsset not implemented")
}
func (UnimplementedManagementInterfaceServer) GetAsset(context.Context, *GetAssetReq) (*GetAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedManagementInterfaceServer) UpdateAsset(context.Context, *UpdateAssetReq) (*UpdateAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedManagementInterfaceServer) ListStorageForm(context.Context, *ListStorageFormReq) (*ListStorageFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorageForm not implemented")
}
func (UnimplementedManagementInterfaceServer) GetStorageForm(context.Context, *GetStorageFormReq) (*GetStorageFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageForm not implemented")
}
func (UnimplementedManagementInterfaceServer) CreateStorageForm(context.Context, *CreateStorageFormReq) (*CreateStorageFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageForm not implemented")
}
func (UnimplementedManagementInterfaceServer) CreateStorageForms(context.Context, *CreateStorageFormsReq) (*CreateStorageFormsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageForms not implemented")
}
func (UnimplementedManagementInterfaceServer) UpdateStorageForm(context.Context, *UpdateStorageFormReq) (*UpdateStorageFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageForm not implemented")
}
func (UnimplementedManagementInterfaceServer) ListScrappedForm(context.Context, *ListScrappedFormReq) (*ListScrappedFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScrappedForm not implemented")
}
func (UnimplementedManagementInterfaceServer) GetScrappedForm(context.Context, *GetScrappedFormReq) (*GetScrappedFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrappedForm not implemented")
}
func (UnimplementedManagementInterfaceServer) CreateScrappedForm(context.Context, *CreateScrappedFormReq) (*CreateScrappedFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScrappedForm not implemented")
}
func (UnimplementedManagementInterfaceServer) UpdateScrappedForm(context.Context, *UpdateScrappedFormReq) (*UpdateScrappedFormReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScrappedForm not implemented")
}
func (UnimplementedManagementInterfaceServer) mustEmbedUnimplementedManagementInterfaceServer() {}

// UnsafeManagementInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementInterfaceServer will
// result in compilation errors.
type UnsafeManagementInterfaceServer interface {
	mustEmbedUnimplementedManagementInterfaceServer()
}

func RegisterManagementInterfaceServer(s grpc.ServiceRegistrar, srv ManagementInterfaceServer) {
	s.RegisterService(&ManagementInterface_ServiceDesc, srv)
}

func _ManagementInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).GetKey(ctx, req.(*GetKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_ModifyUserPd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserPdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).ModifyUserPd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/ModifyUserPd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).ModifyUserPd(ctx, req.(*ModifyUserPdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_ListArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).ListArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/ListArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).ListArea(ctx, req.(*ListAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_GetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).GetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/GetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).GetArea(ctx, req.(*GetAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_ListAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).ListAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/ListAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).ListAsset(ctx, req.(*ListAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).GetAsset(ctx, req.(*GetAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/UpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).UpdateAsset(ctx, req.(*UpdateAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_ListStorageForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).ListStorageForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/ListStorageForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).ListStorageForm(ctx, req.(*ListStorageFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_GetStorageForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).GetStorageForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/GetStorageForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).GetStorageForm(ctx, req.(*GetStorageFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_CreateStorageForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorageFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).CreateStorageForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/CreateStorageForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).CreateStorageForm(ctx, req.(*CreateStorageFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_CreateStorageForms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorageFormsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).CreateStorageForms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/CreateStorageForms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).CreateStorageForms(ctx, req.(*CreateStorageFormsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_UpdateStorageForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).UpdateStorageForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/UpdateStorageForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).UpdateStorageForm(ctx, req.(*UpdateStorageFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_ListScrappedForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScrappedFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).ListScrappedForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/ListScrappedForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).ListScrappedForm(ctx, req.(*ListScrappedFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_GetScrappedForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrappedFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).GetScrappedForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/GetScrappedForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).GetScrappedForm(ctx, req.(*GetScrappedFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_CreateScrappedForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScrappedFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).CreateScrappedForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/CreateScrappedForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).CreateScrappedForm(ctx, req.(*CreateScrappedFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementInterface_UpdateScrappedForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScrappedFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementInterfaceServer).UpdateScrappedForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.interface.v1.ManagementInterface/UpdateScrappedForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementInterfaceServer).UpdateScrappedForm(ctx, req.(*UpdateScrappedFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementInterface_ServiceDesc is the grpc.ServiceDesc for ManagementInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.interface.v1.ManagementInterface",
	HandlerType: (*ManagementInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ManagementInterface_Login_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _ManagementInterface_GetKey_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ManagementInterface_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ManagementInterface_Register_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ManagementInterface_GetUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _ManagementInterface_ListUser_Handler,
		},
		{
			MethodName: "ModifyUserPd",
			Handler:    _ManagementInterface_ModifyUserPd_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ManagementInterface_DeleteUser_Handler,
		},
		{
			MethodName: "ListArea",
			Handler:    _ManagementInterface_ListArea_Handler,
		},
		{
			MethodName: "GetArea",
			Handler:    _ManagementInterface_GetArea_Handler,
		},
		{
			MethodName: "ListAsset",
			Handler:    _ManagementInterface_ListAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _ManagementInterface_GetAsset_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _ManagementInterface_UpdateAsset_Handler,
		},
		{
			MethodName: "ListStorageForm",
			Handler:    _ManagementInterface_ListStorageForm_Handler,
		},
		{
			MethodName: "GetStorageForm",
			Handler:    _ManagementInterface_GetStorageForm_Handler,
		},
		{
			MethodName: "CreateStorageForm",
			Handler:    _ManagementInterface_CreateStorageForm_Handler,
		},
		{
			MethodName: "CreateStorageForms",
			Handler:    _ManagementInterface_CreateStorageForms_Handler,
		},
		{
			MethodName: "UpdateStorageForm",
			Handler:    _ManagementInterface_UpdateStorageForm_Handler,
		},
		{
			MethodName: "ListScrappedForm",
			Handler:    _ManagementInterface_ListScrappedForm_Handler,
		},
		{
			MethodName: "GetScrappedForm",
			Handler:    _ManagementInterface_GetScrappedForm_Handler,
		},
		{
			MethodName: "CreateScrappedForm",
			Handler:    _ManagementInterface_CreateScrappedForm_Handler,
		},
		{
			MethodName: "UpdateScrappedForm",
			Handler:    _ManagementInterface_UpdateScrappedForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/management/interface/v1/management_interface.proto",
}
