// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetsClient is the client API for Assets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsClient interface {
	// 得到资产
	GetAssets(ctx context.Context, in *GetAssetsReq, opts ...grpc.CallOption) (*GetAssetsReply, error)
	// 列出资产
	ListAssets(ctx context.Context, in *ListAssetsReq, opts ...grpc.CallOption) (*ListAssetsReply, error)
	// 创建资产
	CreateAssets(ctx context.Context, in *CreateAssetsReq, opts ...grpc.CallOption) (*CreateAssetsReply, error)
	// 报废资产
	DeleteAssets(ctx context.Context, in *DeleteAssetsReq, opts ...grpc.CallOption) (*DeleteAssetsReply, error)
	// 修改资产信息
	UpdateAssets(ctx context.Context, in *UpdateAssetsdReq, opts ...grpc.CallOption) (*UpdateAssetsReply, error)
	// 区域信息
	GetArea(ctx context.Context, in *GetAreaReq, opts ...grpc.CallOption) (*GetAreaReply, error)
	// 区域信息
	ListAreas(ctx context.Context, in *ListAreasReq, opts ...grpc.CallOption) (*ListAreasReply, error)
	// 添加区域(超级管理员)
	CreateArea(ctx context.Context, in *CreateAreaReq, opts ...grpc.CallOption) (*CreateAreaReply, error)
	// 修改区域(超级管理员)
	UpdateArea(ctx context.Context, in *UpdateAreaReq, opts ...grpc.CallOption) (*UpdateAreaReply, error)
	// 删除区域(超级管理员)
	DeleteArea(ctx context.Context, in *DeleteAreaReq, opts ...grpc.CallOption) (*DeleteAreaReply, error)
	// 用户信息 (区域管理员)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error)
	// 创建用户信息 (超级管理员, 区域管理员)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error)
	// 修改用户区域 (超级管理员, 区域管理员)
	UpdateUserArea(ctx context.Context, in *UpdateUserAreaReq, opts ...grpc.CallOption) (*UpdateUserAreaReply, error)
	// 通过区域列出用户
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error)
	// 分级类目
	CreateClasses(ctx context.Context, in *CreateClassesReq, opts ...grpc.CallOption) (*CreateClassesReply, error)
	// 得到全部类目
	GetClasses(ctx context.Context, in *GetClassesReq, opts ...grpc.CallOption) (*GetClassesReply, error)
}

type assetsClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsClient(cc grpc.ClientConnInterface) AssetsClient {
	return &assetsClient{cc}
}

func (c *assetsClient) GetAssets(ctx context.Context, in *GetAssetsReq, opts ...grpc.CallOption) (*GetAssetsReply, error) {
	out := new(GetAssetsReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) ListAssets(ctx context.Context, in *ListAssetsReq, opts ...grpc.CallOption) (*ListAssetsReply, error) {
	out := new(ListAssetsReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/ListAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) CreateAssets(ctx context.Context, in *CreateAssetsReq, opts ...grpc.CallOption) (*CreateAssetsReply, error) {
	out := new(CreateAssetsReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/CreateAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) DeleteAssets(ctx context.Context, in *DeleteAssetsReq, opts ...grpc.CallOption) (*DeleteAssetsReply, error) {
	out := new(DeleteAssetsReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/DeleteAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) UpdateAssets(ctx context.Context, in *UpdateAssetsdReq, opts ...grpc.CallOption) (*UpdateAssetsReply, error) {
	out := new(UpdateAssetsReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/UpdateAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) GetArea(ctx context.Context, in *GetAreaReq, opts ...grpc.CallOption) (*GetAreaReply, error) {
	out := new(GetAreaReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/GetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) ListAreas(ctx context.Context, in *ListAreasReq, opts ...grpc.CallOption) (*ListAreasReply, error) {
	out := new(ListAreasReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/ListAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) CreateArea(ctx context.Context, in *CreateAreaReq, opts ...grpc.CallOption) (*CreateAreaReply, error) {
	out := new(CreateAreaReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/CreateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) UpdateArea(ctx context.Context, in *UpdateAreaReq, opts ...grpc.CallOption) (*UpdateAreaReply, error) {
	out := new(UpdateAreaReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/UpdateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) DeleteArea(ctx context.Context, in *DeleteAreaReq, opts ...grpc.CallOption) (*DeleteAreaReply, error) {
	out := new(DeleteAreaReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/DeleteArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) UpdateUserArea(ctx context.Context, in *UpdateUserAreaReq, opts ...grpc.CallOption) (*UpdateUserAreaReply, error) {
	out := new(UpdateUserAreaReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/UpdateUserArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) CreateClasses(ctx context.Context, in *CreateClassesReq, opts ...grpc.CallOption) (*CreateClassesReply, error) {
	out := new(CreateClassesReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/CreateClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) GetClasses(ctx context.Context, in *GetClassesReq, opts ...grpc.CallOption) (*GetClassesReply, error) {
	out := new(GetClassesReply)
	err := c.cc.Invoke(ctx, "/assets.service.v1.Assets/GetClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServer is the server API for Assets service.
// All implementations must embed UnimplementedAssetsServer
// for forward compatibility
type AssetsServer interface {
	// 得到资产
	GetAssets(context.Context, *GetAssetsReq) (*GetAssetsReply, error)
	// 列出资产
	ListAssets(context.Context, *ListAssetsReq) (*ListAssetsReply, error)
	// 创建资产
	CreateAssets(context.Context, *CreateAssetsReq) (*CreateAssetsReply, error)
	// 报废资产
	DeleteAssets(context.Context, *DeleteAssetsReq) (*DeleteAssetsReply, error)
	// 修改资产信息
	UpdateAssets(context.Context, *UpdateAssetsdReq) (*UpdateAssetsReply, error)
	// 区域信息
	GetArea(context.Context, *GetAreaReq) (*GetAreaReply, error)
	// 区域信息
	ListAreas(context.Context, *ListAreasReq) (*ListAreasReply, error)
	// 添加区域(超级管理员)
	CreateArea(context.Context, *CreateAreaReq) (*CreateAreaReply, error)
	// 修改区域(超级管理员)
	UpdateArea(context.Context, *UpdateAreaReq) (*UpdateAreaReply, error)
	// 删除区域(超级管理员)
	DeleteArea(context.Context, *DeleteAreaReq) (*DeleteAreaReply, error)
	// 用户信息 (区域管理员)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	// 创建用户信息 (超级管理员, 区域管理员)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	// 修改用户区域 (超级管理员, 区域管理员)
	UpdateUserArea(context.Context, *UpdateUserAreaReq) (*UpdateUserAreaReply, error)
	// 通过区域列出用户
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	// 分级类目
	CreateClasses(context.Context, *CreateClassesReq) (*CreateClassesReply, error)
	// 得到全部类目
	GetClasses(context.Context, *GetClassesReq) (*GetClassesReply, error)
	mustEmbedUnimplementedAssetsServer()
}

// UnimplementedAssetsServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsServer struct {
}

func (UnimplementedAssetsServer) GetAssets(context.Context, *GetAssetsReq) (*GetAssetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (UnimplementedAssetsServer) ListAssets(context.Context, *ListAssetsReq) (*ListAssetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedAssetsServer) CreateAssets(context.Context, *CreateAssetsReq) (*CreateAssetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssets not implemented")
}
func (UnimplementedAssetsServer) DeleteAssets(context.Context, *DeleteAssetsReq) (*DeleteAssetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssets not implemented")
}
func (UnimplementedAssetsServer) UpdateAssets(context.Context, *UpdateAssetsdReq) (*UpdateAssetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssets not implemented")
}
func (UnimplementedAssetsServer) GetArea(context.Context, *GetAreaReq) (*GetAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArea not implemented")
}
func (UnimplementedAssetsServer) ListAreas(context.Context, *ListAreasReq) (*ListAreasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAreas not implemented")
}
func (UnimplementedAssetsServer) CreateArea(context.Context, *CreateAreaReq) (*CreateAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArea not implemented")
}
func (UnimplementedAssetsServer) UpdateArea(context.Context, *UpdateAreaReq) (*UpdateAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArea not implemented")
}
func (UnimplementedAssetsServer) DeleteArea(context.Context, *DeleteAreaReq) (*DeleteAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArea not implemented")
}
func (UnimplementedAssetsServer) GetUser(context.Context, *GetUserReq) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAssetsServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAssetsServer) UpdateUserArea(context.Context, *UpdateUserAreaReq) (*UpdateUserAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserArea not implemented")
}
func (UnimplementedAssetsServer) ListUser(context.Context, *ListUserReq) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedAssetsServer) CreateClasses(context.Context, *CreateClassesReq) (*CreateClassesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClasses not implemented")
}
func (UnimplementedAssetsServer) GetClasses(context.Context, *GetClassesReq) (*GetClassesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClasses not implemented")
}
func (UnimplementedAssetsServer) mustEmbedUnimplementedAssetsServer() {}

// UnsafeAssetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServer will
// result in compilation errors.
type UnsafeAssetsServer interface {
	mustEmbedUnimplementedAssetsServer()
}

func RegisterAssetsServer(s grpc.ServiceRegistrar, srv AssetsServer) {
	s.RegisterService(&Assets_ServiceDesc, srv)
}

func _Assets_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).GetAssets(ctx, req.(*GetAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/ListAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).ListAssets(ctx, req.(*ListAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_CreateAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).CreateAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/CreateAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).CreateAssets(ctx, req.(*CreateAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_DeleteAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).DeleteAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/DeleteAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).DeleteAssets(ctx, req.(*DeleteAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_UpdateAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetsdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).UpdateAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/UpdateAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).UpdateAssets(ctx, req.(*UpdateAssetsdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_GetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).GetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/GetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).GetArea(ctx, req.(*GetAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_ListAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).ListAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/ListAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).ListAreas(ctx, req.(*ListAreasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_CreateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).CreateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/CreateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).CreateArea(ctx, req.(*CreateAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_UpdateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).UpdateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/UpdateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).UpdateArea(ctx, req.(*UpdateAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_DeleteArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).DeleteArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/DeleteArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).DeleteArea(ctx, req.(*DeleteAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_UpdateUserArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).UpdateUserArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/UpdateUserArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).UpdateUserArea(ctx, req.(*UpdateUserAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_CreateClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).CreateClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/CreateClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).CreateClasses(ctx, req.(*CreateClassesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_GetClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).GetClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.service.v1.Assets/GetClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).GetClasses(ctx, req.(*GetClassesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Assets_ServiceDesc is the grpc.ServiceDesc for Assets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assets.service.v1.Assets",
	HandlerType: (*AssetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssets",
			Handler:    _Assets_GetAssets_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _Assets_ListAssets_Handler,
		},
		{
			MethodName: "CreateAssets",
			Handler:    _Assets_CreateAssets_Handler,
		},
		{
			MethodName: "DeleteAssets",
			Handler:    _Assets_DeleteAssets_Handler,
		},
		{
			MethodName: "UpdateAssets",
			Handler:    _Assets_UpdateAssets_Handler,
		},
		{
			MethodName: "GetArea",
			Handler:    _Assets_GetArea_Handler,
		},
		{
			MethodName: "ListAreas",
			Handler:    _Assets_ListAreas_Handler,
		},
		{
			MethodName: "CreateArea",
			Handler:    _Assets_CreateArea_Handler,
		},
		{
			MethodName: "UpdateArea",
			Handler:    _Assets_UpdateArea_Handler,
		},
		{
			MethodName: "DeleteArea",
			Handler:    _Assets_DeleteArea_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Assets_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Assets_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUserArea",
			Handler:    _Assets_UpdateUserArea_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Assets_ListUser_Handler,
		},
		{
			MethodName: "CreateClasses",
			Handler:    _Assets_CreateClasses_Handler,
		},
		{
			MethodName: "GetClasses",
			Handler:    _Assets_GetClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/assets/service/v1/assets.proto",
}
