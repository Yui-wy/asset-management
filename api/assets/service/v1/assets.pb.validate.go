// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/assets/service/v1/assets.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetAssetsReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAssetsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetAssetsReqValidationError is the validation error returned by
// GetAssetsReq.Validate if the designated constraints aren't met.
type GetAssetsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetsReqValidationError) ErrorName() string { return "GetAssetsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAssetsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetsReqValidationError{}

// Validate checks the field values on GetAssetsReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAssetsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Classes

	// no validation rules for Code

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// GetAssetsReplyValidationError is the validation error returned by
// GetAssetsReply.Validate if the designated constraints aren't met.
type GetAssetsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetsReplyValidationError) ErrorName() string { return "GetAssetsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAssetsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetsReplyValidationError{}

// Validate checks the field values on ListAssetsReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAssetsReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssetsReqValidationError{
				field:  "Con",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListAssetsReqValidationError is the validation error returned by
// ListAssetsReq.Validate if the designated constraints aren't met.
type ListAssetsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsReqValidationError) ErrorName() string { return "ListAssetsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAssetsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsReqValidationError{}

// Validate checks the field values on ListAssetsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAssetsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssetsReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAssetsReplyValidationError is the validation error returned by
// ListAssetsReply.Validate if the designated constraints aren't met.
type ListAssetsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsReplyValidationError) ErrorName() string { return "ListAssetsReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAssetsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsReplyValidationError{}

// Validate checks the field values on CreateAssetsReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateAssetsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Classes

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// CreateAssetsReqValidationError is the validation error returned by
// CreateAssetsReq.Validate if the designated constraints aren't met.
type CreateAssetsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetsReqValidationError) ErrorName() string { return "CreateAssetsReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAssetsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetsReqValidationError{}

// Validate checks the field values on CreateAssetsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateAssetsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Classes

	// no validation rules for Code

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// CreateAssetsReplyValidationError is the validation error returned by
// CreateAssetsReply.Validate if the designated constraints aren't met.
type CreateAssetsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetsReplyValidationError) ErrorName() string {
	return "CreateAssetsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetsReplyValidationError{}

// Validate checks the field values on DeleteAssetsReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteAssetsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteAssetsReqValidationError is the validation error returned by
// DeleteAssetsReq.Validate if the designated constraints aren't met.
type DeleteAssetsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetsReqValidationError) ErrorName() string { return "DeleteAssetsReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAssetsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetsReqValidationError{}

// Validate checks the field values on DeleteAssetsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteAssetsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// DeleteAssetsReplyValidationError is the validation error returned by
// DeleteAssetsReply.Validate if the designated constraints aren't met.
type DeleteAssetsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetsReplyValidationError) ErrorName() string {
	return "DeleteAssetsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetsReplyValidationError{}

// Validate checks the field values on UpdateAssetsdReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAssetsdReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// UpdateAssetsdReqValidationError is the validation error returned by
// UpdateAssetsdReq.Validate if the designated constraints aren't met.
type UpdateAssetsdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetsdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetsdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetsdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetsdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetsdReqValidationError) ErrorName() string { return "UpdateAssetsdReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAssetsdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetsdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetsdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetsdReqValidationError{}

// Validate checks the field values on UpdateAssetsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAssetsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Classes

	// no validation rules for Code

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// UpdateAssetsReplyValidationError is the validation error returned by
// UpdateAssetsReply.Validate if the designated constraints aren't met.
type UpdateAssetsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetsReplyValidationError) ErrorName() string {
	return "UpdateAssetsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssetsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetsReplyValidationError{}

// Validate checks the field values on GetAreaReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetAreaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetAreaReqValidationError is the validation error returned by
// GetAreaReq.Validate if the designated constraints aren't met.
type GetAreaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAreaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAreaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAreaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAreaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAreaReqValidationError) ErrorName() string { return "GetAreaReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAreaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAreaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAreaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAreaReqValidationError{}

// Validate checks the field values on GetAreaReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAreaReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// GetAreaReplyValidationError is the validation error returned by
// GetAreaReply.Validate if the designated constraints aren't met.
type GetAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAreaReplyValidationError) ErrorName() string { return "GetAreaReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAreaReplyValidationError{}

// Validate checks the field values on GetAreaByIdsReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAreaByIdsReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAreaByIdsReqValidationError is the validation error returned by
// GetAreaByIdsReq.Validate if the designated constraints aren't met.
type GetAreaByIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAreaByIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAreaByIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAreaByIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAreaByIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAreaByIdsReqValidationError) ErrorName() string { return "GetAreaByIdsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAreaByIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAreaByIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAreaByIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAreaByIdsReqValidationError{}

// Validate checks the field values on GetAreaByIdsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAreaByIdsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAreas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAreaByIdsReplyValidationError{
					field:  fmt.Sprintf("Areas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAreaByIdsReplyValidationError is the validation error returned by
// GetAreaByIdsReply.Validate if the designated constraints aren't met.
type GetAreaByIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAreaByIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAreaByIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAreaByIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAreaByIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAreaByIdsReplyValidationError) ErrorName() string {
	return "GetAreaByIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAreaByIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAreaByIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAreaByIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAreaByIdsReplyValidationError{}

// Validate checks the field values on ListAreasReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAreasReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAreasReqValidationError is the validation error returned by
// ListAreasReq.Validate if the designated constraints aren't met.
type ListAreasReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAreasReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAreasReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAreasReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAreasReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAreasReqValidationError) ErrorName() string { return "ListAreasReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAreasReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAreasReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAreasReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAreasReqValidationError{}

// Validate checks the field values on ListAreasReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAreasReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAreas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAreasReplyValidationError{
					field:  fmt.Sprintf("Areas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAreasReplyValidationError is the validation error returned by
// ListAreasReply.Validate if the designated constraints aren't met.
type ListAreasReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAreasReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAreasReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAreasReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAreasReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAreasReplyValidationError) ErrorName() string { return "ListAreasReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAreasReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAreasReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAreasReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAreasReplyValidationError{}

// Validate checks the field values on CreateAreaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateAreaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AreaInfo

	return nil
}

// CreateAreaReqValidationError is the validation error returned by
// CreateAreaReq.Validate if the designated constraints aren't met.
type CreateAreaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAreaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAreaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAreaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAreaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAreaReqValidationError) ErrorName() string { return "CreateAreaReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAreaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAreaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAreaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAreaReqValidationError{}

// Validate checks the field values on CreateAreaReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateAreaReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// CreateAreaReplyValidationError is the validation error returned by
// CreateAreaReply.Validate if the designated constraints aren't met.
type CreateAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAreaReplyValidationError) ErrorName() string { return "CreateAreaReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAreaReplyValidationError{}

// Validate checks the field values on UpdateAreaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateAreaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// UpdateAreaReqValidationError is the validation error returned by
// UpdateAreaReq.Validate if the designated constraints aren't met.
type UpdateAreaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAreaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAreaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAreaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAreaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAreaReqValidationError) ErrorName() string { return "UpdateAreaReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAreaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAreaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAreaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAreaReqValidationError{}

// Validate checks the field values on UpdateAreaReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAreaReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// UpdateAreaReplyValidationError is the validation error returned by
// UpdateAreaReply.Validate if the designated constraints aren't met.
type UpdateAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAreaReplyValidationError) ErrorName() string { return "UpdateAreaReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAreaReplyValidationError{}

// Validate checks the field values on DeleteAreaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteAreaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteAreaReqValidationError is the validation error returned by
// DeleteAreaReq.Validate if the designated constraints aren't met.
type DeleteAreaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAreaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAreaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAreaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAreaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAreaReqValidationError) ErrorName() string { return "DeleteAreaReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAreaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAreaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAreaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAreaReqValidationError{}

// Validate checks the field values on DeleteAreaReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteAreaReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// DeleteAreaReplyValidationError is the validation error returned by
// DeleteAreaReply.Validate if the designated constraints aren't met.
type DeleteAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAreaReplyValidationError) ErrorName() string { return "DeleteAreaReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAreaReplyValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	return nil
}

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for Power

	return nil
}

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on CreateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for Power

	return nil
}

// CreateUserReqValidationError is the validation error returned by
// CreateUserReq.Validate if the designated constraints aren't met.
type CreateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReqValidationError) ErrorName() string { return "CreateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReqValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for Power

	return nil
}

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on UpdateUserAreaReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserAreaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	return nil
}

// UpdateUserAreaReqValidationError is the validation error returned by
// UpdateUserAreaReq.Validate if the designated constraints aren't met.
type UpdateUserAreaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAreaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAreaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAreaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAreaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAreaReqValidationError) ErrorName() string {
	return "UpdateUserAreaReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAreaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAreaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAreaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAreaReqValidationError{}

// Validate checks the field values on UpdateUserAreaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserAreaReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for Power

	return nil
}

// UpdateUserAreaReplyValidationError is the validation error returned by
// UpdateUserAreaReply.Validate if the designated constraints aren't met.
type UpdateUserAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAreaReplyValidationError) ErrorName() string {
	return "UpdateUserAreaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAreaReplyValidationError{}

// Validate checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NextPower

	return nil
}

// ListUserReqValidationError is the validation error returned by
// ListUserReq.Validate if the designated constraints aren't met.
type ListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReqValidationError) ErrorName() string { return "ListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReqValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on CreateClassesReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateClassesReq) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClz() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateClassesReqValidationError{
					field:  fmt.Sprintf("Clz[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateClassesReqValidationError is the validation error returned by
// CreateClassesReq.Validate if the designated constraints aren't met.
type CreateClassesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassesReqValidationError) ErrorName() string { return "CreateClassesReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateClassesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassesReqValidationError{}

// Validate checks the field values on CreateClassesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateClassesReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClz() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateClassesReplyValidationError{
					field:  fmt.Sprintf("Clz[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateClassesReplyValidationError is the validation error returned by
// CreateClassesReply.Validate if the designated constraints aren't met.
type CreateClassesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassesReplyValidationError) ErrorName() string {
	return "CreateClassesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassesReplyValidationError{}

// Validate checks the field values on GetClassesReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetClassesReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetClassesReqValidationError is the validation error returned by
// GetClassesReq.Validate if the designated constraints aren't met.
type GetClassesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassesReqValidationError) ErrorName() string { return "GetClassesReqValidationError" }

// Error satisfies the builtin error interface
func (e GetClassesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassesReqValidationError{}

// Validate checks the field values on GetClassesReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetClassesReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClz() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClassesReplyValidationError{
					field:  fmt.Sprintf("Clz[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetClassesReplyValidationError is the validation error returned by
// GetClassesReply.Validate if the designated constraints aren't met.
type GetClassesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassesReplyValidationError) ErrorName() string { return "GetClassesReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetClassesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassesReplyValidationError{}

// Validate checks the field values on ListAssetsReq_Condition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAssetsReq_Condition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Classes

	// no validation rules for Address

	// no validation rules for StateNum

	// no validation rules for LowStorageAt

	// no validation rules for UpStorageAt

	// no validation rules for OrderBy

	// no validation rules for AreaId

	return nil
}

// ListAssetsReq_ConditionValidationError is the validation error returned by
// ListAssetsReq_Condition.Validate if the designated constraints aren't met.
type ListAssetsReq_ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsReq_ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsReq_ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsReq_ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsReq_ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsReq_ConditionValidationError) ErrorName() string {
	return "ListAssetsReq_ConditionValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetsReq_ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsReq_Condition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsReq_ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsReq_ConditionValidationError{}

// Validate checks the field values on ListAssetsReply_Assets with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAssetsReply_Assets) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Classes

	// no validation rules for Code

	// no validation rules for AreaId

	// no validation rules for Address

	// no validation rules for AssetInfo

	// no validation rules for PicUrl

	// no validation rules for Price

	// no validation rules for OrderAt

	// no validation rules for OrderNum

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AppliedAt

	// no validation rules for StorageAt

	// no validation rules for ScrappedAt

	return nil
}

// ListAssetsReply_AssetsValidationError is the validation error returned by
// ListAssetsReply_Assets.Validate if the designated constraints aren't met.
type ListAssetsReply_AssetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsReply_AssetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsReply_AssetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsReply_AssetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsReply_AssetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsReply_AssetsValidationError) ErrorName() string {
	return "ListAssetsReply_AssetsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetsReply_AssetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsReply_Assets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsReply_AssetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsReply_AssetsValidationError{}

// Validate checks the field values on GetAreaByIdsReply_Areas with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAreaByIdsReply_Areas) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// GetAreaByIdsReply_AreasValidationError is the validation error returned by
// GetAreaByIdsReply_Areas.Validate if the designated constraints aren't met.
type GetAreaByIdsReply_AreasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAreaByIdsReply_AreasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAreaByIdsReply_AreasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAreaByIdsReply_AreasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAreaByIdsReply_AreasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAreaByIdsReply_AreasValidationError) ErrorName() string {
	return "GetAreaByIdsReply_AreasValidationError"
}

// Error satisfies the builtin error interface
func (e GetAreaByIdsReply_AreasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAreaByIdsReply_Areas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAreaByIdsReply_AreasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAreaByIdsReply_AreasValidationError{}

// Validate checks the field values on ListAreasReply_Areas with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAreasReply_Areas) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AreaInfo

	return nil
}

// ListAreasReply_AreasValidationError is the validation error returned by
// ListAreasReply_Areas.Validate if the designated constraints aren't met.
type ListAreasReply_AreasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAreasReply_AreasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAreasReply_AreasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAreasReply_AreasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAreasReply_AreasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAreasReply_AreasValidationError) ErrorName() string {
	return "ListAreasReply_AreasValidationError"
}

// Error satisfies the builtin error interface
func (e ListAreasReply_AreasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAreasReply_Areas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAreasReply_AreasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAreasReply_AreasValidationError{}

// Validate checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserReply_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for Power

	return nil
}

// ListUserReply_UserValidationError is the validation error returned by
// ListUserReply_User.Validate if the designated constraints aren't met.
type ListUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UserValidationError) ErrorName() string {
	return "ListUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UserValidationError{}

// Validate checks the field values on CreateClassesReq_Classes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateClassesReq_Classes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for ClzInfo

	// no validation rules for Level

	// no validation rules for Pcode

	return nil
}

// CreateClassesReq_ClassesValidationError is the validation error returned by
// CreateClassesReq_Classes.Validate if the designated constraints aren't met.
type CreateClassesReq_ClassesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassesReq_ClassesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassesReq_ClassesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassesReq_ClassesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassesReq_ClassesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassesReq_ClassesValidationError) ErrorName() string {
	return "CreateClassesReq_ClassesValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassesReq_ClassesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassesReq_Classes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassesReq_ClassesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassesReq_ClassesValidationError{}

// Validate checks the field values on CreateClassesReply_Classes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateClassesReply_Classes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for ClzInfo

	// no validation rules for Level

	// no validation rules for Pcode

	return nil
}

// CreateClassesReply_ClassesValidationError is the validation error returned
// by CreateClassesReply_Classes.Validate if the designated constraints aren't met.
type CreateClassesReply_ClassesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassesReply_ClassesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassesReply_ClassesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassesReply_ClassesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassesReply_ClassesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassesReply_ClassesValidationError) ErrorName() string {
	return "CreateClassesReply_ClassesValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassesReply_ClassesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassesReply_Classes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassesReply_ClassesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassesReply_ClassesValidationError{}

// Validate checks the field values on GetClassesReply_Classes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClassesReply_Classes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for ClzInfo

	// no validation rules for Level

	// no validation rules for Pcode

	return nil
}

// GetClassesReply_ClassesValidationError is the validation error returned by
// GetClassesReply_Classes.Validate if the designated constraints aren't met.
type GetClassesReply_ClassesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassesReply_ClassesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassesReply_ClassesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassesReply_ClassesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassesReply_ClassesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassesReply_ClassesValidationError) ErrorName() string {
	return "GetClassesReply_ClassesValidationError"
}

// Error satisfies the builtin error interface
func (e GetClassesReply_ClassesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassesReply_Classes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassesReply_ClassesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassesReply_ClassesValidationError{}
