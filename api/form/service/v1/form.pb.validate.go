// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/form/service/v1/form.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetStorageFormReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetStorageFormReqValidationError is the validation error returned by
// GetStorageFormReq.Validate if the designated constraints aren't met.
type GetStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStorageFormReqValidationError) ErrorName() string {
	return "GetStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStorageFormReqValidationError{}

// Validate checks the field values on GetStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// GetStorageFormReplyValidationError is the validation error returned by
// GetStorageFormReply.Validate if the designated constraints aren't met.
type GetStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStorageFormReplyValidationError) ErrorName() string {
	return "GetStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStorageFormReplyValidationError{}

// Validate checks the field values on ListStorageFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageFormReqValidationError{
				field:  "Conf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListStorageFormReqValidationError is the validation error returned by
// ListStorageFormReq.Validate if the designated constraints aren't met.
type ListStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReqValidationError) ErrorName() string {
	return "ListStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReqValidationError{}

// Validate checks the field values on ListStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetForms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageFormReplyValidationError{
					field:  fmt.Sprintf("Forms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListStorageFormReplyValidationError is the validation error returned by
// ListStorageFormReply.Validate if the designated constraints aren't met.
type ListStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReplyValidationError) ErrorName() string {
	return "ListStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReplyValidationError{}

// Validate checks the field values on CreateStorageFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for AppliedAt

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// CreateStorageFormReqValidationError is the validation error returned by
// CreateStorageFormReq.Validate if the designated constraints aren't met.
type CreateStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageFormReqValidationError) ErrorName() string {
	return "CreateStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageFormReqValidationError{}

// Validate checks the field values on CreateStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// CreateStorageFormReplyValidationError is the validation error returned by
// CreateStorageFormReply.Validate if the designated constraints aren't met.
type CreateStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageFormReplyValidationError) ErrorName() string {
	return "CreateStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageFormReplyValidationError{}

// Validate checks the field values on UpdateStorageFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStorageFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	return nil
}

// UpdateStorageFormReqValidationError is the validation error returned by
// UpdateStorageFormReq.Validate if the designated constraints aren't met.
type UpdateStorageFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorageFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorageFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorageFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorageFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorageFormReqValidationError) ErrorName() string {
	return "UpdateStorageFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorageFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorageFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorageFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorageFormReqValidationError{}

// Validate checks the field values on UpdateStorageFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStorageFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// UpdateStorageFormReplyValidationError is the validation error returned by
// UpdateStorageFormReply.Validate if the designated constraints aren't met.
type UpdateStorageFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorageFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorageFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorageFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorageFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorageFormReplyValidationError) ErrorName() string {
	return "UpdateStorageFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorageFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorageFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorageFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorageFormReplyValidationError{}

// Validate checks the field values on GetScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetScrappedFormReqValidationError is the validation error returned by
// GetScrappedFormReq.Validate if the designated constraints aren't met.
type GetScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScrappedFormReqValidationError) ErrorName() string {
	return "GetScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScrappedFormReqValidationError{}

// Validate checks the field values on GetScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// GetScrappedFormReplyValidationError is the validation error returned by
// GetScrappedFormReply.Validate if the designated constraints aren't met.
type GetScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScrappedFormReplyValidationError) ErrorName() string {
	return "GetScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScrappedFormReplyValidationError{}

// Validate checks the field values on ListScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListScrappedFormReqValidationError{
				field:  "Conf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListScrappedFormReqValidationError is the validation error returned by
// ListScrappedFormReq.Validate if the designated constraints aren't met.
type ListScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReqValidationError) ErrorName() string {
	return "ListScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReqValidationError{}

// Validate checks the field values on ListScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetForms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListScrappedFormReplyValidationError{
					field:  fmt.Sprintf("Forms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListScrappedFormReplyValidationError is the validation error returned by
// ListScrappedFormReply.Validate if the designated constraints aren't met.
type ListScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReplyValidationError) ErrorName() string {
	return "ListScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReplyValidationError{}

// Validate checks the field values on CreateScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for AppliedAt

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// CreateScrappedFormReqValidationError is the validation error returned by
// CreateScrappedFormReq.Validate if the designated constraints aren't met.
type CreateScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScrappedFormReqValidationError) ErrorName() string {
	return "CreateScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScrappedFormReqValidationError{}

// Validate checks the field values on CreateScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// CreateScrappedFormReplyValidationError is the validation error returned by
// CreateScrappedFormReply.Validate if the designated constraints aren't met.
type CreateScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScrappedFormReplyValidationError) ErrorName() string {
	return "CreateScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScrappedFormReplyValidationError{}

// Validate checks the field values on UpdateScrappedFormReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateScrappedFormReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	return nil
}

// UpdateScrappedFormReqValidationError is the validation error returned by
// UpdateScrappedFormReq.Validate if the designated constraints aren't met.
type UpdateScrappedFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScrappedFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScrappedFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScrappedFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScrappedFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScrappedFormReqValidationError) ErrorName() string {
	return "UpdateScrappedFormReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScrappedFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScrappedFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScrappedFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScrappedFormReqValidationError{}

// Validate checks the field values on UpdateScrappedFormReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateScrappedFormReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// UpdateScrappedFormReplyValidationError is the validation error returned by
// UpdateScrappedFormReply.Validate if the designated constraints aren't met.
type UpdateScrappedFormReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScrappedFormReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScrappedFormReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScrappedFormReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScrappedFormReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScrappedFormReplyValidationError) ErrorName() string {
	return "UpdateScrappedFormReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScrappedFormReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScrappedFormReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScrappedFormReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScrappedFormReplyValidationError{}

// Validate checks the field values on ListStorageFormReq_Conf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReq_Conf) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicantId

	// no validation rules for OperatorId

	// no validation rules for StateNum

	// no validation rules for AssetId

	// no validation rules for AssetCode

	return nil
}

// ListStorageFormReq_ConfValidationError is the validation error returned by
// ListStorageFormReq_Conf.Validate if the designated constraints aren't met.
type ListStorageFormReq_ConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReq_ConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReq_ConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReq_ConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReq_ConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReq_ConfValidationError) ErrorName() string {
	return "ListStorageFormReq_ConfValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReq_ConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReq_Conf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReq_ConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReq_ConfValidationError{}

// Validate checks the field values on ListStorageFormReply_Form with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStorageFormReply_Form) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// ListStorageFormReply_FormValidationError is the validation error returned by
// ListStorageFormReply_Form.Validate if the designated constraints aren't met.
type ListStorageFormReply_FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageFormReply_FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageFormReply_FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageFormReply_FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageFormReply_FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageFormReply_FormValidationError) ErrorName() string {
	return "ListStorageFormReply_FormValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageFormReply_FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageFormReply_Form.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageFormReply_FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageFormReply_FormValidationError{}

// Validate checks the field values on ListScrappedFormReq_Conf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReq_Conf) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicantId

	// no validation rules for OperatorId

	// no validation rules for StateNum

	// no validation rules for AssetId

	// no validation rules for AssetCode

	return nil
}

// ListScrappedFormReq_ConfValidationError is the validation error returned by
// ListScrappedFormReq_Conf.Validate if the designated constraints aren't met.
type ListScrappedFormReq_ConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReq_ConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReq_ConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReq_ConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReq_ConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReq_ConfValidationError) ErrorName() string {
	return "ListScrappedFormReq_ConfValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReq_ConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReq_Conf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReq_ConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReq_ConfValidationError{}

// Validate checks the field values on ListScrappedFormReply_Form with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScrappedFormReply_Form) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppliedAt

	// no validation rules for ApplicantId

	// no validation rules for Applicant

	// no validation rules for OperatedAt

	// no validation rules for OperatorId

	// no validation rules for Operator

	// no validation rules for StateNum

	// no validation rules for State

	// no validation rules for AssetId

	// no validation rules for AssetCode

	// no validation rules for AreaId

	return nil
}

// ListScrappedFormReply_FormValidationError is the validation error returned
// by ListScrappedFormReply_Form.Validate if the designated constraints aren't met.
type ListScrappedFormReply_FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrappedFormReply_FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrappedFormReply_FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrappedFormReply_FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrappedFormReply_FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrappedFormReply_FormValidationError) ErrorName() string {
	return "ListScrappedFormReply_FormValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrappedFormReply_FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrappedFormReply_Form.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrappedFormReply_FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrappedFormReply_FormValidationError{}
